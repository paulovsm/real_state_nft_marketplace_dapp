// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
const correctProofData = require('../../zokrates/proof/proof-token0.json');
const correctProofDataIncorrectInputs = require('../../zokrates/proof/proof-token0-fake1.json');
const incorrectProofData = require('../../zokrates/proof/proof-token0-fake2.json');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('Verifier', accounts => {


    describe('match SquareVerifier spec', function () {
        beforeEach(async function () { 
            this.contract = await SquareVerifier.new();

        })

        it('should verify correctProofData', async function () {
            const verified = await this.contract.verifyTx(correctProofData.proof, correctProofData.inputs);
            assert(verified === true, 'should verify incorrectProofData');
        })

        it('should not verify correctProofDataIncorrectInputs', async function () {
            const verified = await this.contract.verifyTx(correctProofDataIncorrectInputs.proof, correctProofDataIncorrectInputs.inputs);
            assert(verified === false, 'should not verify correctProofDataIncorrectInputs');
        })

        it('should not verify incorrectProofData', async function () {
            let verified = false;
            try {
                verified = await this.contract.verifyTx(incorrectProofData.proof, incorrectProofData.inputs);
            }
            catch (error) {
                // threw Error, so test succeeded.
                verified = false;
            }
            assert(verified === false, 'should not verify incorrectProofData');
        })

    });
});